import asyncio
import json
import logging
import requests
from typing import List

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.command import Command, CommandObject
from aiogram.exceptions import TelegramUnauthorizedError
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.utils.markdown import html_decoration as fmt
from aiogram.utils.token import TokenValidationError

from polling_manager import PollingManager

logger = logging.getLogger(__name__)

TOKENS = ["5126472216:AAEL1Dke53Shg5f6aBaHE56EEdaXAiopDV4"]

MAIN_BOT = 5126472216


async def set_commands(bot: Bot):
    if bot.id == MAIN_BOT:
        commands = [
            BotCommand(
                command="add_bot",
                description="add bot, usage '/add_bot 123456789:qwertyuiopasdfgh'",
            ),
            BotCommand(
                command="stop_bot",
                description="stop bot, usage '/stop_bot 123456789'",
            ),
        ]
    else:
        commands = [
            BotCommand(
                command="restart",
                description="restart bot",
            ),
            BotCommand(
                command="list",
                description="get list of users(for admins only)",
            ),
        ]

    await bot.set_my_commands(commands=commands, scope=BotCommandScopeDefault())


async def on_bot_startup(bot: Bot):
    await set_commands(bot)


async def on_bot_shutdown(bot: Bot):
    bot_data = json.loads(requests.get(f"https://true.loca.lt/api/chat/{bot.id}").text)
    if bot_data:
        for user in bot_data["viewers"]:
            await bot.send_message(chat_id=user["tg_id"], text="bot shutdown")


async def on_startup(bots: List[Bot]):
    for bot in bots:
        await on_bot_startup(bot)


async def on_shutdown(bots: List[Bot]):
    for bot in bots:
        await on_bot_shutdown(bot)


async def add_bot(
    message: types.Message,
    bot: Bot,
    command: CommandObject,
    dp_for_new_bot: Dispatcher,
    polling_manager: PollingManager,
):
    if bot.id == MAIN_BOT:
        if command.args:
            try:
                bot = Bot(command.args)

                if bot.id in polling_manager.polling_tasks:
                    await message.answer("Bot with this id already running")
                    return

                # also propagate dp and polling manager to new bot to allow new bot add bots
                await polling_manager.start_bot_polling(
                    dp=dp_for_new_bot,
                    bot=bot,
                    on_bot_startup=on_bot_startup(bot),
                    on_bot_shutdown=on_bot_shutdown(bot),
                    polling_manager=polling_manager,
                    dp_for_new_bot=dp_for_new_bot,
                )
                bot_user = await bot.get_me()
                await message.answer(f"New bot started: @{bot_user.username}")

                url = "https://true.loca.lt/api/chat-from-username/"

                dat = {
                    "name": bot_user.first_name,
                    "startMessage": f"bot @{bot_user.username} generated by {message.from_user.username}",
                    "api_key": command.args,
                    "tg_id": bot_user.id,
                    "admin_tg_id": message.from_user.id,
                }
                r = requests.post(
                    url,
                    data=json.dumps(dat),
                    headers={"content-type": "application/json"},
                )
                print(r.status_code)

            except (TokenValidationError, TelegramUnauthorizedError) as err:
                await message.answer(fmt.quote(f"{type(err).__name__}: {str(err)}"))
        else:
            await message.answer("Please provide token")


async def stop_bot(
    message: types.Message,
    bot: Bot,
    command: CommandObject,
    polling_manager: PollingManager,
):
    if bot.id == MAIN_BOT:
        if command.args:
            try:
                polling_manager.stop_bot_polling(int(command.args))
                bot_data = json.loads(
                    requests.get(
                        f"https://true.loca.lt/api/chat/{int(command.args)}"
                    ).text
                )

                for user in bot_data["viewers"]:
                    await bot.send_message(chat_id=user["tg_id"], text="bot shutdown!")

                url = f"https://true.loca.lt/api/chat/{bot.id}/"
                r = requests.delete(url)
                print(r.status_code)
                await message.answer("Bot stopped")

            except (ValueError, KeyError) as err:
                await message.answer(fmt.quote(f"{type(err).__name__}: {str(err)}"))
        else:
            await message.answer("Please provide bot id")


async def echo(message: types.Message, bot: Bot):
    if bot.id != MAIN_BOT:
        bot_data = json.loads(
            requests.get(f"https://true.loca.lt/api/chat/{bot.id}").text
        )
        if message.chat.id == int(bot_data["admin"]["tg_id"]):
            if message.reply_to_message and "@" in message.reply_to_message.text:
                usr = message.reply_to_message.text.split("@")[1].split(":")[0]
                usr_dat = json.loads(
                    requests.get(
                        f"https://true.loca.lt/api/from-username-to-user/{usr}"
                    ).text
                )
                await bot.send_message(
                    chat_id=int(usr_dat["tg_id"]),
                    text="private massage:\n" + message.text,
                )
            else:
                for user in bot_data["viewers"]:
                    await bot.send_message(
                        chat_id=int(user["tg_id"]),
                        text="new broadcast:\n" + message.text,
                    )
        else:
            await bot.send_message(
                chat_id=int(bot_data["admin"]["tg_id"]),
                text=f"message from @{message.chat.username}:\n " + message.text,
            )

            url = "https://true.loca.lt/api/message-from-username/"

            dat = {
                "author_tg_nickname": message.chat.id,
                "message": message.text,
                "chat_id": bot.id,
            }
            r = requests.post(
                url, data=json.dumps(dat), headers={"content-type": "application/json"}
            )
            print(r.status_code)


async def start(message: types.Message, bot: Bot):
    # create user instance
    url = "https://true.loca.lt/api/user/"
    dat = {"username": message.from_user.username, "tg_id": message.from_user.id}
    requests.post(
        url, data=json.dumps(dat), headers={"content-type": "application/json"}
    )

    if bot.id != MAIN_BOT:
        bot_data = json.loads(
            requests.get(f"https://true.loca.lt/api/chat/{bot.id}").text
        )
        if message.chat.id != int(bot_data["admin"]["tg_id"]):
            await bot.send_message(
                chat_id=int(bot_data["admin"]["tg_id"]),
                text=f"user @{message.from_user.username} joined chat",
            )
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"Welcome to the chat, @{message.from_user.username}",
            )
            url = "https://true.loca.lt/api/add-viewer-to-chat/"
            dat = {"chat_tg_id": bot.id, "user_tg_id": message.from_user.id}
            requests.post(
                url, data=json.dumps(dat), headers={"content-type": "application/json"}
            )


async def user_list(message: types.Message, bot: Bot):
    if bot.id != MAIN_BOT:
        bot_data = json.loads(
            requests.get(f"https://true.loca.lt/api/chat/{bot.id}").text
        )
        if message.chat.id == int(bot_data["admin"]["tg_id"]):
            if bot_data["viewers"]:
                await message.answer(
                    ", ".join(["@" + x["username"] for x in bot_data["viewers"]])
                )
            else:
                await message.answer("nobody has joined your chat yet :(")


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    # TODO different Dispatchers for master bot and slaves
    bots = [Bot(token) for token in TOKENS]
    dp = Dispatcher(isolate_events=True)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    dp.message.register(add_bot, Command(commands="add_bot"))
    dp.message.register(stop_bot, Command(commands="stop_bot"))
    dp.message.register(user_list, Command(commands="list"))
    dp.message.register(start, Command(commands=["start", "restart"]))
    dp.message.register(echo)

    polling_manager = PollingManager()

    for bot in bots:
        await bot.get_updates(offset=-1)
    await dp.start_polling(*bots, dp_for_new_bot=dp, polling_manager=polling_manager)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.error("Exit")
